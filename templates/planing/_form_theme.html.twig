{% block _planing_exceptionaleClosure_widget %}
    <ul id="planing-exceptionaleClosure-fields-list"
        data-prototype="{{ form_widget(prototype)|e }}"
        data-widget-tags="{{ '<li></li>'|e }}"
        data-widget-counter="{{ value|length }}"
    >
        {% for key, exceptionaleClosureForm in form.children %}
            <li class="collection-item">
                {{ form_widget(exceptionaleClosureForm) }}
            </li>
        {% endfor %}
    </ul>

    <button type="button" class="add-item-btn collection-btn btn btn-primary" data-list-selector="#planing-exceptionaleClosure-fields-list">Ajouter une fermeture exceptionnelle</button>
    <button type="button" class="remove-item-btn collection-btn btn btn-danger" data-list-selector="#planing-exceptionaleClosure-fields-list">Retirer une fermeture exceptionnelle</button>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        function addItem(listSelector) {
            var list = document.querySelector(listSelector);
            var counter = list.children.length;
    
            var newWidget = list.dataset.prototype.replace(/__name__/g, counter);
            var newElem = document.createElement('li');
            newElem.className = 'collection-item';
            newElem.innerHTML = newWidget;
            list.appendChild(newElem);
    
            // Afficher le bouton de suppression
            var removeButtons = document.querySelectorAll('[data-list-selector="' + listSelector + '"].remove-item-btn');
            removeButtons.forEach(function (button) {
                button.style.display = 'inline-block';
            });
        }
    
        function removeItem(listSelector) {
            var list = document.querySelector(listSelector);
            var itemsCount = list.children.length;
            if (itemsCount > 0) {
                list.removeChild(list.lastElementChild);
            }
    
            // Masquer le bouton de suppression si la liste est vide
            var removeButtons = document.querySelectorAll('[data-list-selector="' + listSelector + '"].remove-item-btn');
            removeButtons.forEach(function (button) {
                button.style.display = list.children.length > 0 ? 'inline-block' : 'none';
            });
        }
    
        document.querySelectorAll('.remove-item-btn').forEach(function (button) {
            button.style.display = 'none';
        });
        document.querySelectorAll('.add-item-btn').forEach(function (button) {
            button.addEventListener('click', function () {
                var listSelector = this.getAttribute('data-list-selector');
                addItem(listSelector);
            });
        });
    
        document.querySelectorAll('.remove-item-btn').forEach(function (button) {
            button.addEventListener('click', function () {
                var listSelector = this.getAttribute('data-list-selector');
                removeItem(listSelector);
            });
        });
    });

    document.addEventListener('DOMContentLoaded', function() {
        // Récupérer les éléments des champs de date
        var startDateInput = document.getElementById('planing_startDate');
        var endDateInput = document.getElementById('planing_endDate');
    
        // Fonction pour obtenir la date au format "YYYY-MM-DD"
        function getCurrentDate() {
            var currentDate = new Date();
            var year = currentDate.getFullYear();
            var month = ('0' + (currentDate.getMonth() + 1)).slice(-2); // Ajouter 1 car les mois commencent à 0
            var day = ('0' + currentDate.getDate()).slice(-2);
            return year + '-' + month + '-' + day;
        }
    
        // Fonction pour obtenir la date d'il y a un mois au format "YYYY-MM-DD"
        function getDateOneMonthAgo() {
            var currentDate = new Date();
            currentDate.setMonth(currentDate.getMonth() - 1);
            var year = currentDate.getFullYear();
            var month = ('0' + (currentDate.getMonth() + 1)).slice(-2); // Ajouter 1 car les mois commencent à 0
            var day = ('0' + currentDate.getDate()).slice(-2);
            return year + '-' + month + '-' + day;
        }
    
        // Insérer la date du jour dans les champs de date
        startDateInput.value = getCurrentDate();
        endDateInput.value = getCurrentDate();
    
        // Mettre à jour la date de fin à un mois après la date de début
        function updateEndDate() {
            var selectedStartDate = new Date(startDateInput.value);
            var minEndDate = new Date(selectedStartDate);
            minEndDate.setMonth(minEndDate.getMonth() + 1);
            
            // Empêcher la sélection de dates antérieures à la date actuelle pour la date de début
            if (selectedStartDate < new Date()) {
                startDateInput.value = getCurrentDate();
                selectedStartDate = new Date(startDateInput.value);
                minEndDate = new Date(selectedStartDate);
                minEndDate.setMonth(minEndDate.getMonth() + 1);
            }
            
            endDateInput.value = minEndDate.toISOString().slice(0, 10);
        }
    
        // Appeler la fonction pour mettre à jour la date de fin dès le chargement de la page
        updateEndDate();
    
        // Ajouter un écouteur d'événements sur le changement de valeur du champ startDate
        startDateInput.addEventListener('change', function() {
            // Appeler la fonction pour mettre à jour la date de fin
            updateEndDate();
        });
    
        // Ajouter un écouteur d'événements sur le changement de valeur du champ endDate
        endDateInput.addEventListener('change', function() {
            // Récupérer la valeur sélectionnée dans le champ de date
            var selectedStartDate = new Date(startDateInput.value);
            var selectedEndDate = new Date(endDateInput.value);
    
            // Calculer la date limite minimale pour endDate (startDate + 1 mois)
            var minEndDate = new Date(selectedStartDate);
            minEndDate.setMonth(minEndDate.getMonth() + 1);
    
            // Comparer les dates pour empêcher la sélection de dates passées
            if (selectedStartDate < new Date()) {
                // Réinitialiser la valeur du champ à la date actuelle
                startDateInput.value = getCurrentDate();
                // Mettre à jour la date de fin
                updateEndDate();
            } else if (selectedEndDate < minEndDate) {
                // Mettre à jour la valeur de endDate pour respecter la contrainte d'un mois minimum
                endDateInput.value = minEndDate.toISOString().slice(0, 10);
            }
        });
    });
    
</script>

{% endblock %}
